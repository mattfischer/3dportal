#ifndef C_ASTNODE_H
#define C_ASTNODE_H

enum _SymbolType;
typedef enum _SymbolType SymbolType;

typedef enum {
    NODE_COG, NODE_COG_FLAGS,

    NODE_SYMBOL_LIST, NODE_SYMBOL_ENTRY_USE, NODE_SYMBOL_ENTRY,

    NODE_TYPE_AI, NODE_TYPE_COG, NODE_TYPE_FLEX, NODE_TYPE_FLOAT, NODE_TYPE_INT,
    NODE_TYPE_KEYFRAME, NODE_TYPE_MATERIAL, NODE_TYPE_MESSAGE, NODE_TYPE_MODEL, 
    NODE_TYPE_SECTOR, NODE_TYPE_SOUND, NODE_TYPE_SURFACE, NODE_TYPE_TEMPLATE,
    NODE_TYPE_THING, NODE_TYPE_VECTOR,

    NODE_NAME, NODE_NAME_INIT,

    NODE_SYMBOL_USE_LIST, NODE_SYMBOL_USE_DESC, NODE_SYMBOL_USE_LOCAL, NODE_SYMBOL_USE_NOLINK, 
    NODE_SYMBOL_USE_LINKID, NODE_SYMBOL_USE_MASK, 

    NODE_STATEMENT_LIST, NODE_STATEMENT_CALL, NODE_STATEMENT_ASSIGN, NODE_STATEMENT_ASSIGN_INDEXED, 
    NODE_STATEMENT_RETURN, NODE_STATEMENT_IF, NODE_STATEMENT_IF_ELSE, NODE_STATEMENT_FOR, 
    NODE_STATEMENT_WHILE, NODE_STATEMENT_VERBCALL, NODE_STATEMENT_LABEL, NODE_STATEMENT_EMPTY, 

    NODE_ARGUMENT_LIST, 

    NODE_EXPRESSION_ASSIGN, NODE_EXPRESSION_ASSIGN_INDEXED, NODE_EXPRESSION_LOR, NODE_EXPRESSION_LAND, 
    NODE_EXPRESSION_LINVERSE, NODE_EXPRESSION_PLUS, NODE_EXPRESSION_MINUS, NODE_EXPRESSION_TIMES, 
    NODE_EXPRESSION_DIVIDE, NODE_EXPRESSION_MODULUS, NODE_EXPRESSION_BOR, NODE_EXPRESSION_BAND, 
    NODE_EXPRESSION_NEGATIVE, NODE_EXPRESSION_INDEX, NODE_EXPRESSION_BOOLEAN, 
	
    NODE_EXPRESSION_BOOLEAN_EQUAL, NODE_EXPRESSION_BOOLEAN_UNEQUAL,
    NODE_EXPRESSION_BOOLEAN_GREATER, NODE_EXPRESSION_BOOLEAN_LESS, NODE_EXPRESSION_BOOLEAN_GREATER_EQUAL,
    NODE_EXPRESSION_BOOLEAN_LESS_EQUAL,

    NODE_ID, NODE_INT, NODE_FLOAT, NODE_HEX, NODE_VECTOR, NODE_STRING, NODE_LINKID
} C_AST_NodeType;

typedef struct
{
    float x;
    float y;
    float z;
} C_AST_Vector;

typedef union {
    char *stringVal;
    int intVal;
    float floatVal;
    C_AST_Vector vectorVal;
} C_AST_LexData;

struct _ASTNode;
typedef struct _ASTNode ASTNode;
struct _ASTNode
{
    C_AST_NodeType nodeType;
    ASTNode **children;
    int numChildren;
	
    C_AST_LexData lexData;
	
    int line;

    SymbolType type;
};
#endif