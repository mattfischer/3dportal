#ifndef C_AST_H
#define C_AST_H

#include "C_Type.h"

enum NodeType {
	C_AST_COG, C_AST_COG_FLAGS,

	C_AST_SYMBOL_LIST, C_AST_SYMBOL_ENTRY_USE, C_AST_SYMBOL_ENTRY,

	C_AST_TYPE_AI, C_AST_TYPE_COG, C_AST_TYPE_FLEX, C_AST_TYPE_FLOAT, C_AST_TYPE_INT,
	C_AST_TYPE_KEYFRAME, C_AST_TYPE_MATERIAL, C_AST_TYPE_MESSAGE, C_AST_TYPE_MODEL, 
	C_AST_TYPE_SECTOR, C_AST_TYPE_SOUND, C_AST_TYPE_SURFACE, C_AST_TYPE_TEMPLATE,
	C_AST_TYPE_THING, C_AST_TYPE_VECTOR,

	C_AST_NAME, C_AST_NAME_INIT,

	C_AST_SYMBOL_USE_LIST, C_AST_SYMBOL_USE_DESC, C_AST_SYMBOL_USE_LOCAL, C_AST_SYMBOL_USE_NOLINK, 
	C_AST_SYMBOL_USE_LINKID, C_AST_SYMBOL_USE_MASK, 

	C_AST_STATEMENT_LIST, C_AST_STATEMENT_CALL, C_AST_STATEMENT_ASSIGN, C_AST_STATEMENT_ASSIGN_INDEXED, 
	C_AST_STATEMENT_RETURN, C_AST_STATEMENT_IF, C_AST_STATEMENT_IF_ELSE, C_AST_STATEMENT_FOR, 
	C_AST_STATEMENT_WHILE, C_AST_STATEMENT_VERBCALL, C_AST_STATEMENT_LABEL, C_AST_STATEMENT_EMPTY, 

	C_AST_ARGUMENT_LIST, 

	C_AST_EXPRESSION_ASSIGN, C_AST_EXPRESSION_ASSIGN_INDEXED, C_AST_EXPRESSION_LOR, C_AST_EXPRESSION_LAND, 
	C_AST_EXPRESSION_LINVERSE, C_AST_EXPRESSION_PLUS, C_AST_EXPRESSION_MINUS, C_AST_EXPRESSION_TIMES, 
	C_AST_EXPRESSION_DIVIDE, C_AST_EXPRESSION_MODULUS, C_AST_EXPRESSION_BOR, C_AST_EXPRESSION_BAND, 
	C_AST_EXPRESSION_NEGATIVE, C_AST_EXPRESSION_INDEX, C_AST_EXPRESSION_BOOLEAN, 
	
	C_AST_EXPRESSION_BOOLEAN_EQUAL, C_AST_EXPRESSION_BOOLEAN_UNEQUAL,
	C_AST_EXPRESSION_BOOLEAN_GREATER, C_AST_EXPRESSION_BOOLEAN_LESS, C_AST_EXPRESSION_BOOLEAN_GREATER_EQUAL,
	C_AST_EXPRESSION_BOOLEAN_LESS_EQUAL,

	C_AST_ID, C_AST_INT, C_AST_FLOAT, C_AST_HEX, C_AST_VECTOR, C_AST_STRING, C_AST_LINKID
};

struct C_ASTNode {
	NodeType nodeType;
	C_ASTNode **children;
	int numChildren;
	
	void *lexData;
	
	int line;

	C_SymbolType type;
};

struct C_Token;

void C_BuildASTNode(C_Token &newToken, C_Token *input, int num, int &error);
void C_DeleteAST(C_ASTNode *AST);

#endif